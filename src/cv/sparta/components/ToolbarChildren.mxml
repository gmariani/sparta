<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="500" >
	
	<mx:Metadata>
		[Event(name="change", type="mx.events.ListEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.events.ListEvent;
			import mx.core.IFlexDisplayObject;
			import mx.containers.TitleWindow;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			import cv.sparta.dw.toolbar.*;
			import mx.core.UIComponent;
		
			[Bindable]
			public var acChildItems:ArrayCollection = new ArrayCollection([]);
			
			[Bindable]
			public var acChildTags:ArrayCollection = new ArrayCollection([
                { data:"Include", label:"Include" },
                { data:"ItemRef", label:"Item Ref" },
                { data:"Separator", label:"Separator" },
                { data:"Button", label:"Button" },
                { data:"CheckButton", label:"Check Button" },
                { data:"RadioButton", label:"Radio Button" },
                { data:"MenuButton", label:"Menu Button" },
                { data:"Dropdown", label:"DropDown" },
                { data:"ComboBox", label:"ComboBox" },
                { data:"EditControl", label:"Edit Control" },
                { data:"ColorPicker", label:"Color Picker" }
			]);
			
			public function get length():int {
				return listChildItems.dataProvider.length;
			}
			
			private var currentChildIndex:int = -1;
			
			public static function xmlToArray(value:XML):Array {
				var arr:Array = [];
				for each(var f:XML in value.children()) {
					var obj:Object = setChildObject(f);
					arr.push(obj);
				}
				return arr;
			}
			
			override public function set data(value:Object):void {
				if(value is Array) {
					reset();
					
					for each(var o:Object in value) {
						acChildItems.addItem(o);
					}
				}
			}
			
			override public function get data():Object {
				var arr:Array = [];
				for each(var obj:Object in acChildItems) {
					arr.push(obj);
				}
				return arr;
			}
			
			public static function arrayToString(arr:Array):String {
				var str:String = "";
				for(var i:String in arr) {
					str += getChildString(arr[i]);
				}
				return str;
			}
			
			public function reset():void {
				this.errorString = "";
				acChildItems = new ArrayCollection([]);
				listChildItems.selectedItem = null;
			}
			
			private function addChildTag(tagType:String):void {
				var tag:Class = getDefinitionByName("cv.sparta.dw.toolbar." + tagType) as Class;
				var method:Function = tag["getEmptyData"];
				var obj:Object = method();
				
				showChildTag(obj, -1);
			}
            
            private function removeChildTag():void {
    			acChildItems.removeItemAt(currentChildIndex);
				currentChildIndex = -1;
				listChildItems.selectedIndex = currentChildIndex;
			}
			
			private function showChildTag(obj:Object, index:int):void {
				currentChildIndex = index;
				
				var tag:Class = getDefinitionByName("cv.sparta.dw.toolbar." + obj.data.tagType) as Class;
				var popup:Object = PopUpManager.createPopUp(UIComponent(this.parentApplication), tag, true, PopUpManagerChildList.APPLICATION);
				popup.data = obj;
				TitleWindow(popup).setStyle("horizontalAlign", "left");
				popup.addEventListener('SAVE', saveChildTag, false, 0, true);
				PopUpManager.centerPopUp(popup as IFlexDisplayObject);
			}
			
			private function saveChildTag(e:Event):void {
				var popup:Object = e.currentTarget;
				var obj:Object = popup.data;
				
				if(currentChildIndex < 0) {
					acChildItems.addItem(obj);
					listChildItems.selectedItem = obj;
				} else {
					acChildItems.setItemAt(obj, currentChildIndex);
					listChildItems.selectedIndex = currentChildIndex;
				}
			}
			
			private static function getChildString(obj:Object):String {
				var tag:Class = getDefinitionByName("cv.sparta.dw.toolbar." + obj.data.tagType) as Class;
				var method:Function = tag["objectToString"];
				return method(obj);
			}
			
			private static function setChildObject(xml:XML):Object {
				var obj:Object;
				switch(String(xml.localName()).toLowerCase()) {
					case "include" : obj = Include.xmlToObject(xml); break;
					case "itemref" : obj = ItemRef.xmlToObject(xml); break;
					case "separator" : obj = Separator.xmlToObject(xml); break;
					case "button" : obj = cv.sparta.dw.toolbar.Button.xmlToObject(xml); break;
					case "checkbutton" : obj = CheckButton.xmlToObject(xml); break;
					case "radiobutton" : obj = RadioButton.xmlToObject(xml); break;
					case "menubutton" : obj = MenuButton.xmlToObject(xml); break;
					case "dropdown" : obj = Dropdown.xmlToObject(xml); break;
					case "combobox" : obj = cv.sparta.dw.toolbar.ComboBox.xmlToObject(xml); break;
					case "editcontrol" : obj = EditControl.xmlToObject(xml); break;
					case "colorpicker" : obj = ColorPicker.xmlToObject(xml); break;
					default : obj = {};
				}
				
				return obj;
			}
			
			private function initListEditor(e:ListEvent):void {
				listChildItems.itemEditorInstance.addEventListener("SAVE", listEditorHandler);
				listChildItems.itemEditorInstance.addEventListener("REMOVE", listEditorHandler);
			}
			
			private function destroyListEditor(e:ListEvent):void {
				listChildItems.itemEditorInstance.removeEventListener("SAVE", listEditorHandler);
				listChildItems.itemEditorInstance.removeEventListener("REMOVE", listEditorHandler);
			}
			
			private function listEditorHandler(e:Event):void {
				if(e.type == "SAVE") {
					showChildTag(listChildItems.selectedItem, listChildItems.selectedIndex);
				} else {
					removeChildTag();
				}
			}
			
		]]>
	</mx:Script>
	
	<mx:HBox>
		<mx:ComboBox id="ddChildTag" dataProvider="{acChildTags}" />
		
		<mx:Button label="Add" click="addChildTag(ddChildTag.selectedItem.data)" >
			<mx:icon>@Embed(source='../../../assets/icons/addIcon.png')</mx:icon>
		</mx:Button>
	</mx:HBox>
	
	<mx:List 
		editable="true" 
		itemEditor="cv.sparta.editor.ChildEditor"
		editorYOffset="23"
		editorDataField="data" editorHeightOffset="7"
		itemEditEnd="destroyListEditor(event)" 
		itemFocusIn="initListEditor(event)"
		id="listChildItems" change="dispatchEvent(event.clone())" wordWrap="true" variableRowHeight="true" labelFunction="getChildString" width="100%" height="100%" dataProvider="{acChildItems}" />
</mx:VBox>
